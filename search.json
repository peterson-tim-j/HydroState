[{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"load-required-data","dir":"Articles","previous_headings":"","what":"Load required data","title":"Adjust the default state model","text":"Annual rainfall-runoff models require data frame catchment average runoff precipitation year. Load data environment. Ensure three columns named “year”, “flow”, “precipitation”, verify units flow precipitation (‘mm’, ‘’, etc.).","code":"data(streamflow_annual_407211)  # check input data head(streamflow_annual_407211) #> year      flow precipitation #> 1944  0.147021      351.6244 #> 1945 34.849993      598.9727 #> 1946 24.604912      488.5723 #> 1947 23.384022      685.1269 #> 1948 17.931727      524.1311 #> 1949 35.864082      564.7229"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"build-a-hydrostate-model-with-an-adjusted-the-state-model","dir":"Articles","previous_headings":"","what":"Build a hydroState model with an adjusted the state model","title":"Adjust the default state model","text":"building model, adjust state model better suites distribution auto-correlation within residuals. build() provides several options better define rainfall-runoff relationship. model residuals normally distributed, consider changing error.distribution gamma normal. auto-correlation present, consider including AR1, AR2, AR3 term within parameters assume auto-correlation 1, 2, 3 time lags. also possible reduce auto-correlation allowing 3-states rather two. done adjusting transition.graph equal matrix(TRUE,3,3). shift occurring within different model parameter adjustment involves specifying state.shift.parameters. four options adjust state model better fit model’s residuals. details, see build(). parameters - include AR1, AR2, AR3 assume auto-correlation 1, 2, 3 time lags state.shift.parameters - adjust state dependent parameter a1 one auto-correlation terms. error.distribution - adjust assumed distribution model residuals. truc.normal, normal, gamma available. transition.graph - adjust model 2-state 3-state. Available options: 1-state = matrix(TRUE,1,1), 2-state = matrix(TRUE,2,2), 3-state = matrix(TRUE,3,3) example, compare default state model adjusted model. default state model first defined. adjusted state model created assumes gamma distribution residuals, 2-states, auto-regressive lag 2 time-steps.","code":"# Default state model default.model.annual = build(input.data = streamflow_annual_407211,                               parameters = c('a0','a1','std'),                               state.shift.parameters = c('a0','std'),                               error.distribution = 'truc.normal',                               transition.graph = matrix(TRUE,2,2))  # Adjusted state model assuming the residuals are a gamma distribution, AR2, 2-state, a1 adjusted.model.annual = build(input.data = streamflow_annual_407211,                               parameters = c('a0','a1','std','AR2'),                               state.shift.parameters = c('a0','std'),                               error.distribution = 'gamma',                               transition.graph = matrix(TRUE,2,2))"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"fit-the-models","dir":"Articles","previous_headings":"","what":"Fit the models","title":"Adjust the default state model","text":"Fit models fit.hydroState(). negative log-likelihood value model shown.","code":"default.model.annual = fit.hydroState(default.model.annual, pop.size.perParameter = 10, max.generations = 500) #> ... Finished Calibration. #>     Best solution: 40.0121967394132  adjusted.model.annual = fit.hydroState(adjusted.model.annual, pop.size.perParameter = 10, max.generations = 1000) #> ... Finished Calibration. #>     Best solution: 26.1477164188363"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"compare-models-based-on-aic","dir":"Articles","previous_headings":"","what":"Compare models based on AIC","title":"Adjust the default state model","text":"adjusted model lower AIC suggesting better fits rainfall-runoff relationship catchment. validate adjusted model suitable, lets evaluate residuals model.","code":"get.AIC(default.model.annual) #> [1] 96.02439  get.AIC(adjusted.model.annual) #> [1] 72.29543"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"review-the-residuals","dir":"Articles","previous_headings":"","what":"Review the residuals","title":"Adjust the default state model","text":"Review residuals models using plot.hydroState() determine model adequate (uniform normally distributed trends auto-correlation residuals). following two figures show adjusted state model assumes gamma distribution residuals, ‘adjusted.model.annual’, adequate Shapiro-Wilks p-value greater 0.05 suggesting residuals normally distributed.","code":"# review residual plots plot(default.model.annual, pse.residuals = TRUE, siteID = '407211', do.pdf = FALSE)  plot(adjusted.model.annual, pse.residuals = TRUE, siteID = '407211', do.pdf = FALSE)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"evaluate-the-state-shifts","dir":"Articles","previous_headings":"","what":"Evaluate the state-shifts","title":"Adjust the default state model","text":"Set state names relative year record using setInitialYear() evaluat flow states overtime adjusted model using plot.hydroState(). year 1991 selected initial year sufficient streamflow data 1990 site (Bet Bet Creek - 407211).","code":"# set the reference year to name the states adjusted.model.annual = setInitialYear(adjusted.model.annual , 1991)  # plot all four plots plot(adjusted.model.annual)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/adjust.state.model.html","id":"systematic-state-model-selection","dir":"Articles","previous_headings":"","what":"Systematic state model selection","title":"Adjust the default state model","text":"know state model best given observations? Rather manually testing every adjustment state model, build.() function builds every possible state model combination (distribution, auto-correlation terms, 1 3-states) intercept, a0, slope, a1, error, std considered state.shift.parameters. function performs similarly build() can easily replace function workflow. built, models can fitted using fit.hydroState function. function fits model iteratively, requires model provide better fit previous simpler model known reference model. model undergoes 20 calibration trials, best model fit trails less equal reference model calibration, calibration reference criteria list models 0. see summary order reference models revise , use summary.hydroState.allModels() function. models fitted, best model one lowest AIC, get.AIC() function outputs table model AIC. example set build.(), perform steps adjust reference table using summary.hydroState.allModels(), fit models using fit.hydroState(), identify model lowest AIC. Note, parallel processing recommended fitting models can take several hours run.","code":"# Build all model combinations with 'a0' and 'std' as state-dependent parameters  all.models = build.all(input.data = streamflow_annual_407211,                            state.shift.parameters =c('a0','std'),                            siteID = \"407211\")  # Review the order of the reference models, adjust reference models if needed. all.models.ref.table = summary(all.models)  # If reference models are adjusted, then re-build models all.models = build.all(input.data = streamflow_annual_407211,                                state.shift.parameters = c('a0','std'),                                summary.table = all.models.ref.table)  # Fit all models (takes hours to run) <!-- all.models = fit.hydroState(all.models, pop.size.perParameter = 10, max.generations = 5000, doParallel = T) -->  #> Calibrating  36 Models. #> ... Minimum number of calibration per model:  5 #> ... Maximum number of calibration per model:  20 #> ************************************ #> Calibrating Model: model.1State.truc.normal.boxcox.AR0.a0std #> Reference model name for maximum acceptable calib. solution:  #> Reference model maximum acceptable calib. solution: -Inf #> ...  # get table of AIC values for each model get.AIC(all.models)  #>                                               AIC    nParameters #> model.2State.gamma.boxcox.AR0.a0std        79.36469           8 #> model.2State.gamma.boxcox.AR2.a0std        79.39221          10 #> model.2State.gamma.boxcox.AR3.a0std        81.39029          11 #> model.2State.gamma.boxcox.AR1.a0std        82.48915           9 #> model.1State.gamma.boxcox.AR2.a0std        89.13483           5 #> model.1State.gamma.boxcox.AR3.a0std        91.83986           6 #>..."},{"path":"https://peterson-tim-j.github.io/HydroState/articles/hydroState.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Hidden Markov Modelling of hydrological state change","text":"hydroState provides methods construct evaluate hidden Markov models (HMM) annual, seasonal, monthly streamflow runoff precipitation predictor. Streamflow precipitation vary overtime, relationship can often non-stationary change streamflow entirely explained change precipitation. hydroState offers necessary tools identify non-stationary change catchments overtime. shift rainfall-runoff relationship alternate hydrological state can even persist pro-longed drought. detail underlying methods motive, see: Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: 10.1126/science.abd5085. shift alternate state defined evaluating linear model simulates runoff, Q̂\\widehat{Q}, precipitation, PP, predictor:Q̂=Pa1+a0\\widehat{Q} = Pa_1 + a_0 a1a_1 a0a_0 constant parameters. hydroState fits model overtime using hidden Markov model approach allows runoff shift states time step. probability shifting states depends distribution states prior time steps. shift can occur within either following parameters: a1a_1, a0a_0, /error, stdstd. default model (worked ) considers state shift intercept, a0a_0 error, stdstd. vignette provides example build evaluate annual model, great place start. hydroState offers additional tools refine rainfall-runoff relationship evaluate seasonal monthly time-steps. introduced vignettes.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/articles/hydroState.html","id":"load-required-data","dir":"Articles","previous_headings":"Introduction","what":"Load required data","title":"Hidden Markov Modelling of hydrological state change","text":"Annual rainfall-runoff models require data frame catchment average runoff precipitation year. Load data environment. Ensure three columns named “year”, “flow”, “precipitation”, verify units flow precipitation (‘mm’, ‘’, etc.).","code":"data(streamflow_annual_221201)  # check input data head(streamflow_annual_221201) #>  year      flow precipitation #> 1 1923 125.09053      961.6729 #> 2 1924  63.94195      795.7554 #> 3 1925 184.41702     1045.1675 #> 4 1926  71.62613      749.1795 #> 5 1927 130.10813      981.1049 #> 6 1928 269.01408      969.8059"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/hydroState.html","id":"build-a-2-state-annual-hydrostate-model","dir":"Articles","previous_headings":"Introduction","what":"Build a 2-state annual hydroState model","title":"Hidden Markov Modelling of hydrological state change","text":"Build 2-state annual hydroState model build(). model default requires input data. input data can gaps flow precipitation. message appear gaps data, model still built. Handling gaps discussed build() documentation. order adjust default model, see articles/vignettes: Adjust default state model Seasonal monthly models.","code":"default.model.annual = build(input.data = streamflow_annual_221201)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/hydroState.html","id":"fit-the-model","dir":"Articles","previous_headings":"Introduction","what":"Fit the model","title":"Hidden Markov Modelling of hydrological state change","text":"Fit parameters built model fit.hydroState(). calibrates model parameters maximum likelihood estimation minimizing negative log-likelihood. details likelihood function, refer fit.hydroState() documentation. calibration procedure optimizes model parameters using DEoptim R-package. fit.hydroState() initiated, output prints initial negative log-likelihood value initial parameters, calibration settings. Every 25 iterations, best set parameter values, bestmemit, lowest negative log-likelihood, bestvalit, printed console. take seconds completely calibrate model. calibration reaches maximum number generations, recommended increase max.generations.","code":"default.model.annual = fit.hydroState(default.model.annual, pop.size.perParameter = 10, max.generations = 500)  #>... Starting calibration using the following settings: #>    - Initial parameter set neg. log liklihood: Inf #>    - total population size: 90 #>    - relative tolerance: 1e-08 #>    - iterations required that meet the tolerance: 50 #>    - maximum iterations allowed: 500 #>    - DEoptim strategy type: 3  #>Iteration: 25 bestvalit: 52.490485 bestmemit:   -4.297386    0.011387    0.008619   -2.391905    0.522673    0.335929    0.337020    0.857055    0.556159 #>Iteration: 50 bestvalit: 37.572710 bestmemit:   -4.818044    0.008852    0.015845   -2.450097    0.416463    0.121642    0.832793    0.941794    0.252304 #>Iteration: 75 bestvalit: 36.923899 bestmemit:   -4.478514    0.009273    0.016020   -2.449549    0.413689    0.121469    0.892506    0.959339    0.000972 #>Iteration: 100 bestvalit: 36.908512 bestmemit:   -6.983881    0.009347    0.016090   -2.450366    0.416905    0.120549    0.896700    0.961387    0.000126 #>Iteration: 125 bestvalit: 36.908188 bestmemit:   -7.459433    0.009366    0.016125   -2.450803    0.417723    0.120532    0.896099    0.961124    0.000000 #>Iteration: 150 bestvalit: 36.908180 bestmemit:   -7.962110    0.009364    0.016121   -2.450759    0.417812    0.120538    0.896094    0.961110    0.000000 #>Iteration: 175 bestvalit: 36.908176 bestmemit:   -8.011148    0.009365    0.016122   -2.450765    0.417787    0.120533    0.896105    0.961132    0.000000 #>Iteration: 200 bestvalit: 36.908176 bestmemit:   -8.010275    0.009365    0.016122   -2.450765    0.417787    0.120533    0.896102    0.961131    0.000000 #>... Finished Calibration. #>    Best solution: 36.908175905606"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/hydroState.html","id":"review-the-residuals","dir":"Articles","previous_headings":"Introduction","what":"Review the residuals","title":"Hidden Markov Modelling of hydrological state change","text":"Review model’s residuals figures using plot.hydroState() ensure uniform normally distributed trends auto-correlation. large plot five figures (-E) produced check discussed . also option export plot PDF .pdf = T label plots site ID (.e. siteID = 221201). Alternatively, residuals can reviewed without plotting using get.residuals() returns data frame normal pseudo residuals time-step. residuals fitted model meet checks , consider adjusting model discussed Adjust default state model vignette. Time-series normal-pseudo residuals ensure residuals year within confidence intervals. Auto-correlation function (ACF) normal-pseudo residuals ensure serial correlation residuals. Lag spikes confidence interval lag (except 0). Histogram uniform-pseudo residuals show uniform distribution (“box” equal frequency residual value) Histogram normal-pseudo residuals show normal distribution centered zero skew AIC estimator determine parsimonious, best performing model given number parameters. comparing models, lowest AIC best performing model. Shapiro-Wilks test normality residuals. p-value greater 0.05 (chosen alpha level) indicates residuals normally distributed","code":"# review residual plots plot(default.model.annual, pse.residuals = TRUE, siteID = '221201', do.pdf = FALSE)  # get residual values model.residuals = get.residuals(default.model.annual)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/hydroState.html","id":"evaluate-the-state-shifts","dir":"Articles","previous_headings":"Introduction","what":"Evaluate the state-shifts","title":"Hidden Markov Modelling of hydrological state change","text":"Set state names relative year record using setInitialYear(). provides name states easier interpret following figures. plot state-shifts overtime using plot.hydroState(). example, 1990 chosen year reference, year can selected reference year. four plots within function shown , either plot combination plots can selected, see plot.hydroState(). Alternatively, states can reviewed without plotting using get.states() returns data frame states time-step. receive results without plotting figure, use get.states(). exports Viterbi flow states, Normal flow state, conditional probabilities, emission density. Please refer get.states() explanation.","code":"# set the reference year to name the states default.model.annual = setInitialYear(default.model.annual, 1990)  # plot all four plots plot(default.model.annual) # get data frame of state values model.states = get.states(default.model.annual)  head(model.states)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"sub-annual-models","dir":"Articles","previous_headings":"","what":"Sub-annual models","title":"Seasonal and monthly models","text":"Seasonal monthly models provide insight state rainfall-runoff relationship throughout year, sensitive analysis, often seasonal variation auto-correlation. hydroState provides additional options explain variation models statistically adequate. options located within build() function. seasonal variation can explained sinusoidal function particular parameter identifying seasonal.parameters build(). vignette provides example analysis seasonal time-step intercept, a0, seasonal.parameters.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"load-required-data","dir":"Articles","previous_headings":"","what":"Load required data","title":"Seasonal and monthly models","text":"Seasonal monthly rainfall-runoff models require data frame catchment average runoff precipitation month. Load data environment. Ensure four columns named “year”, “month”, “flow”, “precipitation”, verify units flow precipitation (‘mm’, ‘’, etc.). Note, hydroState parses input.data given sequential order year, month, day (1950-01-01, 1950-01-02 1978-11, 1978-12, 1980-01, etc). Avoid re-labeling months water-years seasonal monthly input.data. Use calender years. seasonal analysis, hydroState provides additional get.seasons() function adjust monthly data seasons. flow precipitation summed every three months shown last month season. number months season included. example shown .","code":"data(streamflow_monthly_415201)  # check input data head(streamflow_monthly_415201) #>   year month     flow precipitation #> 1 1950     1 0.000000      2.316268 #> 2 1950     2 0.000000     86.074245 #> 3 1950     3 2.044923     58.934578 #> 4 1950     4 1.189653     40.083532 #> 5 1950     5 1.098197     82.928550 #> 6 1950     6 2.417402     20.966111 # aggregate monthly data to seasonal streamflow_seasonal_415201 = get.seasons(streamflow_monthly_415201)  # check seasonal data head(streamflow_seasonal_415201) #>   year month      flow precipitation nmonths #> 1 1950     5  4.332774      181.9467       3 #> 2 1950     8  6.924973      126.3109       3 #> 3 1950    11  7.729439      170.7257       3 #> 4 1951     2  7.049185      141.9339       3 #> 5 1951     5  1.395975      128.1353       3 #> 6 1951     8 36.430009      227.4161       3"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"build-a-sub-annual-hydrostate-model","dir":"Articles","previous_headings":"","what":"Build a sub-annual hydroState model","title":"Seasonal and monthly models","text":"seasonal monthly models, additional options building model. default model can built identical default annual model except monthly seasonal time-step model can adjusted. addition options presented adjusting default state model vignette, seasonal monthly models can assume parameters within rainfall-runoff relationship vary seasonally throughout year. available within seasonal.parameters. assumes parameter best modeled sinusoidal function representing seasonal trends. input accepts default parameter: a1, a0, std. Typically, assuming seasonal trends intercept, a0, explains trends residuals model. details, see build(). analysis, adjusted model built seasonal time-step:","code":"# Build seasonal hydroState model with adjusted model, seasonal forcing model.seasonal.adjusted = build(input.data = streamflow_seasonal_415201,                           parameters = c('a0','a1','std','AR2'),                           seasonal.parameters = 'a0',                           data.transform = 'boxcox',                           transition.graph = matrix(TRUE,3,3))"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"fit-the-model","dir":"Articles","previous_headings":"","what":"Fit the model","title":"Seasonal and monthly models","text":"Fit built models fit.hydroState(). take typically hour run.","code":"<!-- model.seasonal.adjusted = fit.hydroState(model.seasonal.adjusted, pop.size.perParameter = 10, max.generations = 10000, doParallel = TRUE)  -->"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"review-the-residuals","dir":"Articles","previous_headings":"","what":"Review the residuals","title":"Seasonal and monthly models","text":"Review model’s residuals figures using plot.hydroState() ensure uniform normally distributed trends auto-correlation.","code":"# review residual plots plot(model.seasonal.fitted.415201, pse.residuals = TRUE, siteID = '415201', do.pdf = FALSE)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"evaluate-the-state-shifts","dir":"Articles","previous_headings":"","what":"Evaluate the state-shifts","title":"Seasonal and monthly models","text":"Set state names relative year record using setInitialYear(). provides name states easier interpret following figures. plot state-shifts overtime using plot.hydroState(). example, 1990 chosen year reference. four plots within function shown , either plot combination plots can selected. Alternatively, states can reviewed without plotting using get.states() returns data frame states time-step.","code":"# set the reference year to name the states model.seasonal.fitted.415201 = setInitialYear(model.seasonal.fitted.415201, 1990)   # plot all four plots plot(model.seasonal.fitted.415201, do.pdf = F)"},{"path":"https://peterson-tim-j.github.io/HydroState/articles/subAnnual.models.html","id":"systematic-model-selection-for-sub-annual-models","dir":"Articles","previous_headings":"","what":"Systematic model selection for sub-annual models","title":"Seasonal and monthly models","text":"identify best sub-annual model, systematic evaluation possible model combinations can performed using build.() function. example evaluating possible model combinations a0 std state dependent parameters, a0 expressed seasonal.parameter. procedure identical systematic model evaluation within “Adjust default state model vignette”, expect seasonal.parameters may selected. Note, recommend run systematic analysis parallel high-performance computer possible. example can take hours fit 12 models running parallel 7-core, 64-bit operating system.","code":"# Build all possible models with the intercept, 'a0', as a seasonal parameter and state dependent parameter all.models.seasonal = build.all(input.data = streamflow_seasonal_415201,                                         state.shift.parameter = c('a0','std'),                                         seasonal.parameter = 'a0')  # Review the order of the reference models, adjust reference models if needed. all.models.ref.table = summary(all.models.seasonal)  # Re-build with adjusted reference table all.models.seasonal = build.all(input.data = streamflow_seasonal_415201,                                         state.shift.parameter = c('a0','std'),                                         seasonal.parameter = 'a0',                                         summary.table = all.models.ref.table)  # Fit all models (takes hours to run) <!-- all.models.seasonal = fit.hydroState(all.models.seasonal, pop.size.perParameter = 10, max.generations = 10000, doParallel = T) -->  # Identify the best model with the lowest AIC get.AIC(all.models.seasonal.fitted.415201)  #>                                                  AIC    nParameters   AIC.weights #> model.3State.gamma.boxcox.AR2.a0.seasonal.a0std  92.73299          23 9.999948e-01 #> model.3State.gamma.boxcox.AR3.a0.seasonal.a0std 117.07896          24 5.168178e-06 #> model.2State.gamma.boxcox.AR3.a0.seasonal.a0std 133.67572          15 1.286464e-09 #> model.3State.gamma.boxcox.AR1.a0.seasonal.a0std 150.25432          22 3.231464e-13 #> ..."},{"path":"https://peterson-tim-j.github.io/HydroState/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Peterson. Author, maintainer, copyright holder. Thomas Westfall. Author.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: 10.1126/science.abd5085","code":"@Article{,   author = {T. J. Peterson and M. Saft and M. C. Peel and A John},   title = {Watersheds may not recover from drought},   journal = {Science},   year = {2021},   volume = {NA},   page = {NA},   doi = {10.1126/science.abd5085}, }"},{"path":[]},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Hidden Markov Modelling of Hydrological State Change","text":"hydroState R-package identifies regime changes streamflow time-series explained variations precipitation. details mathematics, use understanding catchment drought non-recovery, see: Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: 10.1126/science.abd5085 package allows flexible set Hidden Markov Models annual, seasonal monthly time-step built includes precipitation predictor streamflow. Suites models can build single catchment, ranging one three states differing combinations error models auto-correlation terms, allowing parsimonious model easily identified (AIC). entire package written R S4 object oriented code documentation user facing functions.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Hidden Markov Modelling of Hydrological State Change","text":"can install development version hydroState GitHub : can also get official release version CRAN soon:","code":"# install.packages(\"devtools\") devtools::install_github(\"peterson-tim-j/HydroState\") install.packages(\"hydroState\")"},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Hidden Markov Modelling of Hydrological State Change","text":"sure see Getting Started article example workflow. package contains default hydroState model object explains streamflow function precipitation using linear model. model object built (build()), model fitted (fit.hydroState()) determine likely rainfall-runoff state time-step. assess adequacy fit, residuals plotted (plot()), adequate fit requires residuals normally distributed, uniform, minimal correlation minimal trends. resulting runoff states fitted model can evaluated time (plot()) even exported (get.states()) state values, confidence intervals, conditional probabilities time-step. Input data requires dataframe catchment average runoff precipitation annual, seasonal, monthly timesteps, gaps missing data permitted.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"adjusting-the-default-model","dir":"","previous_headings":"Usage","what":"Adjusting the default model","title":"Hidden Markov Modelling of Hydrological State Change","text":"better explain rainfall-runoff relationship, default model can adjusted selecting various items within build() function. include: data.transform: transform streamflow observations order reduce skew: boxcox, log, burbidge, none parameters: account auto-correlation including degree auto-correlation: AR1, AR2, AR3 state.shift.parameters: assign either intercept, slope, standard deviation, auto-correlation parameter state dependent parameter error.distribution: adjust error distribution normal, gamma, truc.normal seasonal.parameters: account intra-annual varation within rainfall-runoff relationship transition.graph: set number possible states model (1, 2, 3). example adjust default model demonstrated within Adjust default state model article Seasonal monthly models article.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"finding-the-best-model","dir":"","previous_headings":"Usage","what":"Finding the best model","title":"Hidden Markov Modelling of Hydrological State Change","text":"additional option construct possible types models using build.() function, compare using fit.hydroState() function. likely model can selected based AIC best model lowest AIC. example demonstrated end Adjust default state model article Seasonal monthly models article. get stated, recommended evaluate default model first one state two states shown Getting Started article.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"how-to-cite-hydrostate","dir":"","previous_headings":"","what":"How to cite hydroState:","title":"Hidden Markov Modelling of Hydrological State Change","text":"Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: 10.1126/science.abd5085.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments:","title":"Hidden Markov Modelling of Hydrological State Change","text":"package development funded Victorian Government Department Energy, Environment, Climate Action (https://www.water.vic.gov.au/).","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds all hydroState models — build.all","title":"Builds all hydroState models — build.all","text":"build.builds possible combinations hydroState models. fields available build order specify type models built. models built, fitted using fit.hydroState() function.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds all hydroState models — build.all","text":"","code":"build.all(   input.data = data.frame(year = c(), flow = c(), precip = c()),   data.transform = NULL,   parameters = NULL,   seasonal.parameters = NULL,   state.shift.parameters = NULL,   error.distribution = NULL,   flickering = FALSE,   transition.graph = NULL,   summary.table = NULL,   siteID = NULL )"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds all hydroState models — build.all","text":"input.data dataframe annual, seasonal, monthly runoff precipitation observations. Gaps missing data either streamflow precipitation permitted, handling discussed build. Monthly data required using seasonal.parameters assumes selected model parameters better defined sinusoidal function. data.transform character string method transformation. empty, default builds possible combinations models boxcox data transformation. parameters character vector parameters determine model form. empty, default builds possible combinations model forms. seasonal.parameters character vector parameters sinusoidal function represent seasonal variation. Requires monthly seasonal data. empty monthly seasonal data given, default builds possible combinations models seasonal parameter parameters. state.shift.parameters character vector one parameters identify state dependent parameters. one set parameters permitted. empty, default builds possible model combinations c('a0','std') state shift parameters. error.distribution character string distribution HMM error. empty, default builds models possible combinations error distribution: c('truc.normal', 'normal','gamma') flickering logical TRUE/FALSE. TRUE = allows sensitive markov flickering states time. FALSE (default), state needs persist least three time steps state shift can occur. transition.graph matrix given number states. empty, default builds models possible combinations states: 1-state matrix (1 1): matrix(TRUE,1,1), 2-state matrix (2 2): matrix(TRUE,2,2), 3-state matrix (3 3): matrix(TRUE,3,3). summary.table data frame table summarizing built models corresponding reference model. function summary(). empty, summary table built automatically. siteID character string site identifier.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds all hydroState models — build.all","text":"list built hydroState models every combination objects ready fitted","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Builds all hydroState models — build.all","text":"build.possible combinations hydroState models built auto-correlation lag residual distribution 1 3 states specified data transformation. allows investigation state changes state.shift.parameters: intercept c('a0', 'std') slope c('a1', 'std'). reduce number models search, specify field(s) remain constant. example, investigate best model number auto-correlation terms number states boxcox data transform gamma distribution residuals, set data.transform boxcox error.distribution gamma. fields specified, possible model combinations built. investigating state shifts intercept a0 slope a1, recommended build fit model combinations separately.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds all hydroState models — build.all","text":"","code":"# Load data data(streamflow_annual_221201)  # Build all annual models with state shift in intercept 'a0' all.annual.models = build.all(input.data = streamflow_annual_221201,                                     state.shift.parameters = c('a0','std'),                                      siteID = '221201')  # OR  # Build all annual models with state shift in slope 'a1' all.annual.models = build.all(input.data = streamflow_annual_221201,                                     state.shift.parameters = c('a1','std'),                                      siteID = '221201')"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds hydroState model — build","title":"Builds hydroState model — build","text":"build builds hydrostate model object either default model model can specified options . Every model depends linear base model streamflow, \\(Q\\), function precipitation,  \\(P\\): \\(\\hat{Q} = Pa_1+a_0\\). default model variant base linear model state shifts expected intercept, \\(a_0\\), standard deviation, \\(std\\), rainfall-runoff relationship. additional options adjust model auto-correlation terms seasonal parameters can independent state change state. number states assumed error distribution can also selected. model built, hydroState model ready fitted fit.hydroState","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds hydroState model — build","text":"","code":"build(   input.data = data.frame(year = c(), flow = c(), precip = c()),   data.transform = \"boxcox\",   parameters = c(\"a0\", \"a1\", \"std\"),   seasonal.parameters = NULL,   state.shift.parameters = c(\"a0\", \"std\"),   error.distribution = \"truc.normal\",   flickering = FALSE,   transition.graph = matrix(TRUE, 2, 2) )"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds hydroState model — build","text":"input.data dataframe annual, seasonal, monthly runoff precipitation observations. Gaps missing data either streamflow precipitation permitted. Monthly data required using seasonal.parameters. data.transform character sting method transformation. default 'boxcox'. options: 'log', 'burbidge', 'none' parameters character vector parameters construct model. Required default: a0, a1, std. Auto-correlation terms optional: AR1, AR2, AR3. seasonal.parameters character vector one parameters (a0, a1, std) defined sinusoidal function represent seasonal variation. Requires monthly seasonal data. Default empty, seasonal parameters. state.shift.parameters character vector one parameters (a0, a1, std, AR1, AR2, AR3) able shift dependent state. Default a0 std. error.distribution character string distribution HMM error. Default 'truc.normal'. Others include: 'normal' 'gamma' flickering logical TRUE/FALSE. TRUE = allows sensitive markov flickering states time. FALSE (default), state needs persist least three time steps state shift can occur. transition.graph matrix given number states. Default 2-state matrix (2 2): matrix(TRUE,2,2).","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds hydroState model — build","text":"built hydroState model object ready fitted fit.hydroState()","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Builds hydroState model — build","text":"build selection items consider defining rainfall-runoff relationship investigating state shifts relationship. hydroState provides various options modelling rainfall-runoff relationship. Data gaps  input.data: missing input.data either dependent variable, streamflow, independent variable, precipitation, emissions probability missing time-step set equal one. essentially ignores missing periods. time step missing period state probability dependent length gap. larger gap, closer state probability gets approaching finite probability near zero (transition probabilities recursively multiplied). model auto-correlation terms gaps dependent variable, auto-correlation function restarts beginning continuous period gap. ignores auto-correlation first time steps gap. instance, 'AR1' model ignore contribution prior time step first (1) observation gap. Transform Observations data.transform: Transforms streamflow observations remove heteroscedasticity. Often skew within hydrologic data. defining relationships rainfall-runoff, skew results unequal variance residuals, heteroscedasticity. Transforming streamflow observations often required. several options transform observations. Since degree transformation typically known, boxcox default. options include: log, burbidge, course, none transformation performed. Model Structure parameters seasonal.parameters: structure model depends parameters. hydroState simulates runoff, \\(Q\\), one finite states, \\(\\), every time-step, \\(t\\), depending distribution states prior time steps. results runoff distribution state can vary time (\\(\\hat{_tQ_i}\\)). model defines relationship susceptible state shifts precipitation, \\(P_t\\), predictor. takes form simple linear model \\(\\hat{_tQ_i} = f(P_t)\\): $$ \\hat{_tQ_i} = P_ta_1 + a_0 $$ \\(a_0\\) \\(a_1\\) constant parameters. parameters model error, \\(std\\), establish rainfall-runoff relationship required parameters every built model object. default parameters: c('a0', 'a1', 'std'). Auto-correlation parameters: relationship may contain serial correlation better defined auto-regressive term: $$ \\hat{_tQ_i} = P_ta_1 + a_0 + AR1\\hat{_{t-1}Q} $$ AR1 lag-1 auto-correlation term. Either, lag-1: AR1, lag-2: AR2, lag-3: AR3 auto-correlation coefficients option additional parameters better define rainfall-runoff relationship. Sub-annual analysis seasonal.parameters: Additional options include explaining seasonal rainfall-runoff relationship sinusoidal function better defines either constant parameters error (\\(a_0, a_1, std\\)) throughout year, .e: $$ a_0 = a_{0.disp} + a_{0.amp} * sin(2\\pi(\\frac{M_t}{12} + a_{0.phase})) $$ \\(M_t\\) integer month \\(t\\). Monthly streamflow precipitation required input.data sub-annual analysis. State Dependent Parameters state.shift.parameters: state dependent parameters subject shift order better explain state streamflow time. previously chosen parameters can selected (a_0, a_1, std, AR1, AR2, AR3). default model evaluates shifts rainfall-runoff relationship a_0 std state dependent parameters. Distribution Residuals error.distribution: distribution residuals (error) within state model can chosen reduce skew assist making models statistically adequate (see plot(pse.residuals = TRUE)). Either normal: normal, truncated normal: truc.normal, gamma: gamma distributions acceptable. error distribution ensures streamflow greater zero Q > 0, specifically truc.normal greater equal zero Q >= 0. default truc.normal. Sub-annual models restricted gamma distribution. Markov flickering flickering: flickering FALSE, markov avoids state shifts short duration, hence state shift occur last extended period. default FALSE. TRUE, flickering states sensitive. explanation method, see: Lambert et al., 2003. current form Markov model homogeneous transition probabilities time-invariant. Number States transition.graph: number possible states rainfall-runoff relationship transition states selected transition.graph. default 2-state model 2 2 unstructured matrix TRUE transition state (.e. matrix(TRUE,2,2)). hydroState accepts 1-state 3-states (.e. 3-state unstructured transition graph: matrix(TRUE,3,3)). unstructured transition graph allows either state remain current state transition state. 3-state transition graph, one may want assume transitions can occur particular order, (low -> Low -> Normal->) rather (low <-> Low <-> Normal <-> low). Thus, structured graph also acceptable (3-state structured: matrix(c(TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,TRUE),3,3)). details Supplementary Materials (Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: doi:10.1126/science.abd5085 ).","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds hydroState model — build","text":"","code":"# Load data data(streamflow_annual_221201)  ## Build default annual hydroState model model = build(input.data = streamflow_annual_221201)  # OR  ## Build annual hydroState model with specified objects # Build hydroState model with: 2-state, normal error distribution, # 1-lag of auto-correlation, and state dependent parameters ('a1', 'std') model = build(input.data = streamflow_annual_221201,                    data.transform = 'boxcox',                    parameters = c('a0','a1','std','AR1'),                    state.shift.parameters = c('a1','std'),                    error.distribution = 'normal',                    flickering = FALSE,                    transition.graph = matrix(TRUE,2,2))"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check reliability of state predictions — check","title":"Check reliability of state predictions — check","text":"check fitting model, reliability estimated states can assessed generating synthetic state sequences assessing well model identified .","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check reliability of state predictions — check","text":"","code":"check(model, n.samples = 1e+05)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check reliability of state predictions — check","text":"model fitted hydroState model. n.samples integer samples re-sample. Default 100000.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check reliability of state predictions — check","text":"data frame returned matrix depending number states. 2 state model, 2x2 matrix returned. diagonal cell estimates probability correctly identifying state. diagonals estimate probability incorrectly identifying state state 2.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check reliability of state predictions — check","text":"check validates model's states time-step re-sampling input data re-running Viterbi algorithm. input data duplicated 100 times, synthetic series generated model sample states. provides time series transformed streamflow observations can compared observations `known' state. Viterbi states re-sampled transformed observations inferred, probability inferred state equaling 'known' state calculated.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check reliability of state predictions — check","text":"","code":"## Check reliability of state predictions (>5s to run) if (FALSE) { # \\dontrun{ check(model = model.annual.fitted.221201) } # }"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/fit.hydroState.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit hydroState model — fit.hydroState","title":"Fit hydroState model — fit.hydroState","text":"fit.hydroState fits single hydroState model (build) multiple models (build.) using global optimization differential evolution DEoptim library. fitting models sure install load parallelly library. fitting models may take hours days, calibration can occur parallel parallelly library installed loaded.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/fit.hydroState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit hydroState model — fit.hydroState","text":"","code":"fit.hydroState(   model,   pop.size.perParameter = 10,   max.generations = 500,   doParallel = FALSE )"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/fit.hydroState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit hydroState model — fit.hydroState","text":"model built hydroState model object, hydroState.allModels object, hydroState.subAnnual.allModels object pop.size.perParameter integer greater equal number parameters model. default '10' sufficient models. max.generations integer stop optimizer set number generations reached. default '500'. doParallel TRUE/FALSE perform fitting parallel computer cores. Default FALSE","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/fit.hydroState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit hydroState model — fit.hydroState","text":"fitted hydroState model","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/fit.hydroState.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit hydroState model — fit.hydroState","text":"fit.hydroState hydroState model object built, model ready fit observed streamflow minimizing negative log-likelihood function calibrate model parameters. required input given built hydroState model object hydroState.allModels object (models build.= TRUE). fitting models, models fitted least complex (least max amount parameters). model minimum 5 maximum 20 calibration attempts outperform prior reference model else model rejected. instance 'model.1State.normal.log.AR0' contains 3-parameters reference model 'model.1State.normal.log.AR1' contains 4-parameters. objective function 'model.1State.normal.log.AR1' must calibrate model lower negative log-likelihood 'model.1State.normal.log.AR0'. reference models pre-defined, function allows user edit reference models data.frame needed using summary. Details likelihood function follows: likelihood function estimated : \\(L_{T} = \\delta P(x_{1}) + \\Gamma \\delta P(x_{2})...\\Gamma \\delta P(x_{T})1'\\) : \\(\\delta\\) initial state distribution, initial probability state: \\(\\delta = \\begin{pmatrix} \\delta_{1} \\\\ 1- \\delta_{1} \\end{pmatrix}\\) \\(P(x)\\) \\(m\\) x \\(m\\) diagonal emissions matrix probability density state using lower tail truncated Gaussian distribution two-parameter Gamma distribution: \\(f_{Gau}(x=\\hat{_{obs}q_{t}}; \\mu = \\hat{_{t}q_{}}, \\sigma = \\sigma_{}, = 0) = \\frac{\\phi(\\frac{x-\\mu}{\\sigma})}{\\sigma(1-\\Phi(\\frac{-\\mu}{\\sigma}))}\\) \\(f_{Gam}(x = \\hat{_{obs}q_{t}}; k = \\frac{\\hat{_{t}q_{}}^2}{\\sigma_{}^2}, \\theta = \\frac{\\sigma_{}^2}{\\hat{_{t}q_{}}}) = \\frac{x^{k-1}e^{\\frac{x}{\\theta}}}{\\theta^{k}\\Gamma(k)}\\) \\(\\phi\\) probability density function standard normal distribution, \\(\\Phi\\) cumulative distribution function standard normal distribution, \\(k\\) shape parameter, \\(\\theta\\) scale parameter, \\(\\Gamma(k)\\) gamma function. details, refer pg. 8–17 Supplementary Materials (Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: doi:10.1126/science.abd5085 ). \\(\\Gamma\\) transition matrix \\(T\\) number time-steps.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/fit.hydroState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit hydroState model — fit.hydroState","text":"","code":"# Load data data(streamflow_annual_221201)  ## Build default annual hydroState model model = build(input.data = streamflow_annual_221201)  ## Fit built model (runtime ~ 14 sec) if (FALSE) { # \\dontrun{ model = fit.hydroState(model) } # }  ## Fit all built models (runtime > several hours) # Load data data(streamflow_annual_221201)  ## Build all annual models all.annual.models = build.all(input.data = streamflow_annual_221201, siteID = '221201')  if (FALSE) { # \\dontrun{ # Fit all (runtime > several hours) all.annual.models = fit.hydroState(all.annual.models)  } # }"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.AIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Get AIC — get.AIC","title":"Get AIC — get.AIC","text":"get.AIC retrieves Akaike information criteria fitted hydroState model object models.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.AIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get AIC — get.AIC","text":"","code":"get.AIC(model)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.AIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get AIC — get.AIC","text":"model fitted hydroState model object.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.AIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get AIC — get.AIC","text":"AIC value single model list variable AIC values al models","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.AIC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get AIC — get.AIC","text":"get.AIC AIC negative log-likelihood model plus penalty model parameters. function can performed single model selection models find lowest AIC set.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.AIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get AIC — get.AIC","text":"","code":"# Load fitted model data(model.annual.fitted.221201)  ## AIC of a single model get.AIC(model.annual.fitted.221201) #> [1] 89.81635  ## Lowest AIC of a model set get.AIC(all.models.annual.fitted.407211) #> Error: unable to find an inherited method for function ‘viterbi’ for signature ‘.Object = \"hydroState\", data = \"data.frame\", do.plot = \"logical\", plot.percentiles = \"numeric\", plot.yearRange = \"numeric\", plot.options = \"missing\"’"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pseudo residuals — get.residuals","title":"Get pseudo residuals — get.residuals","text":"pseudo residuals derived conditional probabilities observations. time-step, pseudo residual probability observation occurring given prior observations latter observations.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pseudo residuals — get.residuals","text":"","code":"get.residuals(model)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pseudo residuals — get.residuals","text":"model fitted hydroState model object.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pseudo residuals — get.residuals","text":"Data frame residuals time-step","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.residuals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get pseudo residuals — get.residuals","text":"get.residuals get.residuals retrieves residuals fitted model exports data frame.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.residuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pseudo residuals — get.residuals","text":"","code":"# Load fitted model data(model.annual.fitted.221201)  ## Get residuals in a dataframe get.residuals(model = model.annual.fitted.221201) #>    year      flow precipitation Qhat.flow Qhat.precipitation unif.pseuou.resid #> 1  1923 125.09053      961.6729  4.837000           961.6729       0.282360012 #> 2  1924  63.94195      795.7554  4.173494           795.7554       0.205443625 #> 3  1925 184.41702     1045.1675  5.222607          1045.1675       0.388304359 #> 4  1926  71.62613      749.1795  4.285325           749.1795       0.530903701 #> 5  1927 130.10813      981.1049  4.876022           981.1049       0.256435045 #> 6  1928 269.01408      969.8059  5.598474           969.8059       0.964239123 #> 7  1929        NA      928.4907        NA           928.4907                NA #> 8  1930        NA      932.5074        NA           932.5074                NA #> 9  1931        NA      865.8296        NA           865.8296                NA #> 10 1932        NA      972.0635        NA           972.0635                NA #> 11 1933        NA     1253.4182        NA          1253.4182                NA #> 12 1934        NA     1457.7865        NA          1457.7865                NA #> 13 1935        NA      947.9338        NA           947.9338                NA #> 14 1936        NA      869.2778        NA           869.2778                NA #> 15 1937        NA      936.5729        NA           936.5729                NA #> 16 1938        NA      872.1881        NA           872.1881                NA #> 17 1939        NA      870.5235        NA           870.5235                NA #> 18 1940        NA      806.5427        NA           806.5427                NA #> 19 1941        NA      672.8050        NA           672.8050                NA #> 20 1942        NA      926.1249        NA           926.1249                NA #> 21 1943        NA      695.4942        NA           695.4942                NA #> 22 1944        NA      824.9850        NA           824.9850                NA #> 23 1945        NA      856.2976        NA           856.2976                NA #> 24 1946        NA      953.9565        NA           953.9565                NA #> 25 1947 106.87001      904.7650  4.680927           904.7650       0.353287786 #> 26 1948 152.83273      969.1042  5.035866           969.1042       0.497172893 #> 27 1949 269.40076     1081.6194  5.599905          1081.6194       0.697165777 #> 28 1950 448.62075     1236.2350  6.108404          1236.2350       0.651928408 #> 29 1951 388.09704     1083.6728  5.963829          1083.6728       0.952628956 #> 30 1952        NA     1497.3913        NA          1497.3913                NA #> 31 1953        NA      922.0591        NA           922.0591                NA #> 32 1954        NA      714.8487        NA           714.8487                NA #> 33 1955        NA      934.8080        NA           934.8080                NA #> 34 1956        NA     1118.4126        NA          1118.4126                NA #> 35 1957 159.99592      985.0376  5.081379           985.0376       0.489706408 #> 36 1958  60.15846      718.3842  4.113468           718.3842       0.456390805 #> 37 1959 255.76358     1235.8035  5.548156          1235.8035       0.082635987 #> 38 1960 254.81734     1093.9330  5.544464          1093.9330       0.583992796 #> 39 1961 392.20071     1340.7397  5.974320          1340.7397       0.111047954 #> 40 1962 123.98650      802.7521  4.828206           802.7521       0.888813453 #> 41 1963 275.55938     1067.5055  5.622426          1067.5055       0.776686704 #> 42 1964 109.58464      875.7446  4.705781           875.7446       0.521384141 #> 43 1965        NA      846.4930        NA           846.4930                NA #> 44 1966 285.17953     1219.3717  5.656619          1219.3717       0.317565507 #> 45 1967  83.88916      705.8440  4.441346           705.8440       0.923285767 #> 46 1968  35.63002      880.7425  3.600868           880.7425       0.005046797 #> 47 1969 156.71943     1074.2433  5.060818          1074.2433       0.523658725 #> 48 1970        NA     1516.1403        NA          1516.1403                NA #> 49 1971        NA      753.4645        NA           753.4645                NA #> 50 1972  31.71113      514.5234  3.487715           514.5234       0.689934534 #> 51 1973  68.07280      864.5321  4.235161           864.5321       0.118714928 #> 52 1974 452.44566     1348.9024  6.116875          1348.9024       0.227030319 #> 53 1975 331.58509     1053.5235  5.806896          1053.5235       0.935192909 #> 54 1976 251.36386      992.4163  5.530872           992.4163       0.906051110 #> 55 1977 126.59230      791.1651  4.848840           791.1651       0.921066231 #> 56 1978 546.16352     1311.3833  6.304748          1311.3833       0.570963360 #> 57 1979  64.08882      709.9309  4.175753           709.9309       0.594340275 #> 58 1980  21.94957      615.9869  3.133299           615.9869       0.026384968 #> 59 1981  35.73008      645.2430  3.603596           645.2430       0.240714515 #> 60 1982  24.04471      614.2559  3.220663           614.2559       0.049092189 #> 61 1983 234.84171     1057.5951  5.463161          1057.5951       0.655581349 #> 62 1984 306.71210      994.5065  5.729165           994.5065       0.973381871 #> 63 1985 651.97575     1314.2949  6.481540          1314.2949       0.758630857 #> 64 1986  98.10944      664.3635  4.596225           664.3635       0.979579972 #> 65 1987  52.39369      655.7308  3.977693           655.7308       0.558221010 #> 66 1988 135.15181      932.1170  4.913771           932.1170       0.503157793 #> 67 1989 257.87835     1123.2078  5.556358          1123.2078       0.459140897 #> 68 1990 172.44735      893.0441  5.155874           893.0441       0.891867083 #> 69 1991 188.67362     1070.6112  5.245305          1070.6112       0.307760997 #> 70 1992 189.19196      998.9060  5.248034           998.9060       0.629434226 #> 71 1993  88.38179      902.7844  4.492917           902.7844       0.160873059 #> 72 1994  87.99908      838.0450  4.488626           838.0450       0.402072977 #> 73 1995 139.66260     1028.2866  4.946364          1028.2866       0.183716646 #> 74 1996  61.28702      754.2106  4.131753           754.2106       0.370900387 #> 75 1997  51.92631      679.9007  3.968901           679.9007       0.557207831 #> 76 1998 135.79290      999.5150  4.918468           999.5150       0.487249117 #> 77 1999  42.27925      751.4960  3.767673           751.4960       0.397844091 #> 78 2000  44.45604      906.4195  3.816746           906.4195       0.209180324 #> 79 2001 151.32080     1188.6574  5.025989          1188.6574       0.401022743 #> 80 2002  99.88997      694.2971  4.614030           694.2971       0.983078681 #> 81 2003  24.55597      753.2511  3.240871           753.2511       0.256132490 #> 82 2004  21.93022      873.0992  3.132456           873.0992       0.058297582 #> 83 2005  47.45737      841.9714  3.880684           841.9714       0.451713013 #> 84 2006  72.10276      821.5185  4.291866           821.5185       0.767453030 #> 85 2007 139.71488      956.2435  4.946736           956.2435       0.854382702 #> 86 2008  18.05987      648.0498  2.947585           648.0498       0.292415514 #> 87 2009  16.74858      837.1073  2.876306           837.1073       0.036696607 #> 88 2010  21.36819      804.4517  3.107640           804.4517       0.117427502 #> 89 2011 173.88331     1188.6321  5.164119          1188.6321       0.505455717 #> 90 2012 224.61359     1219.1642  5.418824          1219.1642       0.601268000 #> 91 2013 123.83128      966.0427  4.826963           966.0427       0.788537296 #> 92 2014 132.86532     1275.3471  4.896834          1275.3471       0.051273823 #> 93 2015 245.60145     1144.0182  5.507773          1144.0182       0.687090854 #> 94 2016  97.54142      832.5498  4.590477           832.5498       0.786505168 #>    norm.pseudo.resid #> 1       -0.575844898 #> 2       -0.822333264 #> 3       -0.283741201 #> 4        0.077541726 #> 5       -0.654375229 #> 6        1.802150344 #> 7                 NA #> 8                 NA #> 9                 NA #> 10                NA #> 11                NA #> 12                NA #> 13                NA #> 14                NA #> 15                NA #> 16                NA #> 17                NA #> 18                NA #> 19                NA #> 20                NA #> 21                NA #> 22                NA #> 23                NA #> 24                NA #> 25      -0.376459158 #> 26      -0.007086565 #> 27       0.516266278 #> 28       0.390532018 #> 29       1.670896675 #> 30                NA #> 31                NA #> 32                NA #> 33                NA #> 34                NA #> 35      -0.025805072 #> 36      -0.109530655 #> 37      -1.387557031 #> 38       0.212118730 #> 39      -1.220973886 #> 40       1.220242149 #> 41       0.761051025 #> 42       0.053627787 #> 43                NA #> 44      -0.474517370 #> 45       1.427525551 #> 46      -2.572606359 #> 47       0.059338434 #> 48                NA #> 49                NA #> 50       0.495664791 #> 51      -1.181435262 #> 52      -0.748662522 #> 53       1.515625076 #> 54       1.316823544 #> 55       1.412279984 #> 56       0.178827336 #> 57       0.238724200 #> 58      -1.936798855 #> 59      -0.704006011 #> 60      -1.653720197 #> 61       0.400433436 #> 62       1.932999509 #> 63       0.701905199 #> 64       2.045150168 #> 65       0.146460361 #> 66       0.007915496 #> 67      -0.102598297 #> 68       1.236518660 #> 69      -0.502206895 #> 70       0.330355254 #> 71      -0.990876028 #> 72      -0.247985075 #> 73      -0.901291611 #> 74      -0.329469591 #> 75       0.143893791 #> 76      -0.031967168 #> 77      -0.258931385 #> 78      -0.809268627 #> 79      -0.250700743 #> 80       2.121941648 #> 81      -0.655314976 #> 82      -1.569226532 #> 83      -0.121334588 #> 84       0.730484737 #> 85       1.055417121 #> 86      -0.546341772 #> 87      -1.790377690 #> 88      -1.187945188 #> 89       0.013675882 #> 90       0.256630537 #> 91       0.801356297 #> 92      -1.632626160 #> 93       0.487621038 #> 94       0.794353505"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.seasons.html","id":null,"dir":"Reference","previous_headings":"","what":"Get seasons — get.seasons","title":"Get seasons — get.seasons","text":"Aggregates monthly data 4 seasons year.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.seasons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get seasons — get.seasons","text":"","code":"get.seasons(   input.data = data.frame(year = c(), month = c(), flow = c(), precip = c()) )"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.seasons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get seasons — get.seasons","text":"input.data dataframe monthly runoff precipitation observations. Gaps missing data either streamflow precipitation permitted, handling discussed build. Monthly data required using seasonal.parameters assumes selected model parameters better defined sinusoidal function.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.seasons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get seasons — get.seasons","text":"dataframe seasonal observations additional column counting number months season.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.seasons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get seasons — get.seasons","text":"get.seasons function takes sums monthly runoff precipitation observations 4 seasons year.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.seasons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get seasons — get.seasons","text":"","code":"# Load data data(streamflow_monthly_221201)  # aggregate monthly data to seasonal streamflow_seasonal_221201 = get.seasons(streamflow_monthly_221201)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.states.html","id":null,"dir":"Reference","previous_headings":"","what":"Get states — get.states","title":"Get states — get.states","text":"get.states uses Viterbi algorithm globally decode model estimate probable sequence states.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get states — get.states","text":"","code":"get.states(model)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get states — get.states","text":"model fitted hydroState model object.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get states — get.states","text":"data frame results evaluate rainfall-runoff states time","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get states — get.states","text":"get.states dataframe results include: time-step: year possibly either season month subannual analysis Viterbi State Number: state number (.e. 1, 2, 3) differentiate states Obs. flow: streamflow observations Viterbi Flow: flow values Viterbi state including 5\\ Normal State Flow: flow values normal state including 5\\ Conditional Prob: conditional probabilities state show probability remaining given state. conditional probability closer 1, higher probability hydroState model remains state next time-step. Emission Density: emission density state result multiplying conditional probabilities transition probabilities timestep.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/get.states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get states — get.states","text":"","code":"# Load fitted model data(model.annual.fitted.221201)  ## Set initial year to set state names model.annual.fitted.221201 =                 setInitialYear(model = model.annual.fitted.221201,                                initial.year = 1990)  ## Get states model.annual.fitted.221201.states =                 get.states(model = model.annual.fitted.221201)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"hydroState-internal — hydroState-internal","title":"hydroState-internal — hydroState-internal","text":"several undocumented internal functions intended user. functions listed shown within file: hydroState-internal.Rd","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":null,"dir":"Reference","previous_headings":"","what":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"hydroState R-package identifies regime changes streamflow time-series explained variations precipitation.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"details mathematics, use understanding catchment drought non-recovery, see: Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: 10.1126/science.abd5085 package allows flexible set Hidden Markov Models (HMMs) annual, seasonal monthly time-step built includes precipitation predictor streamflow. Suites models can build single catchment, ranging one three states differing combinations error models auto-correlation terms, allowing parsimonious model easily identified (AIC). entire package written R S4 object oriented code user facing functions vignettes.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"build — Builds hydroState model build.— Builds hydroState models fit.hydroState — Fit hydroState model(s) setInitialYear — Sets state names given initial year plot — Plot states pseudo residuals time get.residuals — Get pseudo residuals get.states — Get states check — Check reliability state predictions get.AIC — Get AIC get.seasons — Get data seasons","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":"vignettes","dir":"Reference","previous_headings":"","what":"Vignettes","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"Getting Started Adjust default state model Seasonal monthly models","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"package contains default hydroState model object explains streamflow function precipitation using linear model. model object built (build), model fitted (fit.hydroState) determine likely rainfall-runoff state time-step. assess adequacy fit, residuals plotted (plot, adequate fit requires residuals normally distributed, uniform, minimal correlation minimal trends. resulting runoff states fitted model can evaluated time (plot) even exported (get.states) state values, confidence intervals, conditional probabilities time-step. Input data requires dataframe catchment average runoff precipitation annual, seasonal, monthly timesteps, gaps missing data permitted. example workflow default model demonstrated within Getting Started article. better explain rainfall-runoff relationship, default model can adjusted selecting various items within build function. include: data.transform: transform streamflow observations order reduce skew: 'boxcox', 'log', 'burbidge', 'none' parameters: account auto-correlation including degree auto-correlation: 'AR1', 'AR2', 'AR3' state.shift.parameters: assign either intercept, slope, auto-correlation parameter state dependent parameter error.distribution: adjust error distribution 'normal', 'gamma', 'truc.normal' seasonal.parameters: account intra-annual varation within rainfall-runoff relationship transition.graph: set number possible states model (1, 2, 3). example adjust default model demonstrated within Adjust default state model article Seasonal monthly models article. additional option construct possible types models using build., compare using fit.hydroState function. likely model can selected based AIC best model lowest AIC. example demonstrated end Adjust default state model article Seasonal monthly models article. get stated, recommended evaluate default model first one state two states.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":"acknowledgments","dir":"Reference","previous_headings":"","what":"Acknowledgments","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"package development funded Victorian Government Department Energy, Environment, Climate Action (https://www.water.vic.gov.au/).","code":""},{"path":[]},{"path":"https://peterson-tim-j.github.io/HydroState/reference/hydroState-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"hydroState: Hidden Markov modeling for hydrological state change — hydroState-package","text":"Maintainer: Tim Peterson tim.peterson@monash.edu (ORCID) [copyright holder] Authors: Thomas Westfall thomas.westfall1@monash.edu (ORCID)","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/plot.hydroState.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot states or pseudo residuals over time — plot.hydroState","title":"Plot states or pseudo residuals over time — plot.hydroState","text":"plot produces several figures visualize pseudo residuals results markov states time. setInitialYear required plot. recommend evaluate pseudo residuals markov states. pseudo residuals probability observation occurring time-step given prior observations latter observations, derived conditional probabilities observations. markov states Viterbi algorithm globally decoding model estimate probable sequence states.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/plot.hydroState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot states or pseudo residuals over time — plot.hydroState","text":"","code":"# S3 method for class 'hydroState' plot(   x,   ...,   pse.residuals = FALSE,   ind.variable = TRUE,   dep.variable = TRUE,   dep.variable.transformed = TRUE,   cond.state.prob = TRUE,   siteID = NULL,   do.pdf = FALSE )"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/plot.hydroState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot states or pseudo residuals over time — plot.hydroState","text":"x fitted hydroState model object. ... additional arguments passed plotting, none available time. pse.residuals option plot pseudo residuals. Default FALSE. ind.variable option plot independent variable time. Default TRUE. dep.variable option plot dependent variable states time. Default TRUE. dep.variable.transformed option plot transformed dependent variable states time. Default TRUE. cond.state.prob option plot conditional state probabilities time state. Default TRUE. siteID character string catchment identifier (.e. gauge ID). Default NULL. recommended .pdf = TRUE. .pdf option export figures pdf. Default FALSE.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/plot.hydroState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot states or pseudo residuals over time — plot.hydroState","text":"plots evaluate rainfall-runoff states time along observations conditional probabilities state.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/plot.hydroState.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot states or pseudo residuals over time — plot.hydroState","text":"plot plot produces five figures psuedo residuals four figures results fitted hydroState model. pse.residuals FALSE, default plot produces four result figures. Figures easily viewed pdf exported current working directory (.pdf = TRUE). psuedo residual figures ) Time-series normal-pseudo residuals ensure residuals year within confidence intervals. B) Auto-correlation function (ACF) normal-pseudo residuals ensure minimal serial correlation residuals. Lag spikes confidence interval lag (except 0). C) Histogram uniform-pseudo residuals show uniform distribution (equal frequency residual value) D) Histogram normal-pseudo residuals show normal distribution centered zero skew E) Quantile-Quantile (Q-Q) plot normal-pseudo residuals vs. theoretical quantities align diagonal line. last plot contains Akaike information criterion (AIC) Shapiro-Wilk p-value. AIC estimator determine parsimonious, best performing model given number parameters. comparing models, lowest AIC best performing model. Shapiro-Wilks test normality residuals p-value greater 0.05 (chosen alpha level) indicates residuals normally distributed; null hypothesis residuals normally distributed rejected. markov state figures ) independent variable: precipitation B) dependent variable states: streamflow observations, likely state, relative normal state estimate C) transformed dependent variable states: transformed streamflow observations likely state D) conditional state probabilities state: probability hydroState model remaining given state figures often large, common errors plotting window small. Exporting plots pdf recommend pseudo residual figure (.pdf = TRUE). \"Error plot.new() : figure margins large\": reset plot window \"dev.()\", enlarge plot area re-run plot.residuals. \"Error par(op) : invalid value specified graphical parameter \"pin\" R plot window reset \"dev.\", additional plot.residuals attempt result error.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/plot.hydroState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot states or pseudo residuals over time — plot.hydroState","text":"","code":"# Load fitted model data(model.annual.fitted.221201)  ## Set initial year to set state names model.annual.fitted.221201 =                   setInitialYear(model = model.annual.fitted.221201,                   initial.year = 1990)  ## Plot only residuals plot(model.annual.fitted.221201, pse.residuals = TRUE)   ## Plot all markov state figures plot(model.annual.fitted.221201)  #> NULL  ## Plot only dependent variable transformed with markov states plot(model.annual.fitted.221201,              ind.variable = FALSE,              dep.variable = FALSE,              dep.variable.transformed = TRUE,              cond.state.prob = FALSE)  #> NULL"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/setInitialYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets state names given initial year — setInitialYear","title":"Sets state names given initial year — setInitialYear","text":"sets state names time-step relative initial year given","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/setInitialYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets state names given initial year — setInitialYear","text":"","code":"setInitialYear(model, initial.year)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/setInitialYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets state names given initial year — setInitialYear","text":"model fitted hydroState model object. initial.year integer year (YYYY). Default first year input.data.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/setInitialYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets state names given initial year — setInitialYear","text":"fitted hydroState model object state names time-step ready plot","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/setInitialYear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sets state names given initial year — setInitialYear","text":"setInitialYear hydroState assigns names computed states. requires choosing initial year state value year named 'Normal'. state values given names relative state value initial year. choice initial year affect results. means easily interpret difference state values relative . best choose year based question asked. example, testing impact drought, year beginning drought, 1990, selected initial year conditions considered 'Normal' (Peterson TJ, Saft M, Peel MC & John (2021), Watersheds may recover drought, Science, DOI: doi:10.1126/science.abd5085 )","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/setInitialYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets state names given initial year — setInitialYear","text":"","code":"# Load fitted model data(model.annual.fitted.221201)  ## Set initial year to set state names model.annual.fitted.221201 =                 setInitialYear(model = model.annual.fitted.221201,                                initial.year = 1990)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/summary.hydroState.allModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize all models — summary.hydroState.allModels","title":"Summarize all models — summary.hydroState.allModels","text":"summary outputs summary table built hydroState models allows users edit reference models calibration.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/summary.hydroState.allModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize all models — summary.hydroState.allModels","text":"","code":"# S3 method for class 'hydroState.allModels' summary(object, ...)"},{"path":"https://peterson-tim-j.github.io/HydroState/reference/summary.hydroState.allModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize all models — summary.hydroState.allModels","text":"object hydroState.allModels object list models build.... additional input required","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/summary.hydroState.allModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize all models — summary.hydroState.allModels","text":"data.frame summary table models reference models","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/summary.hydroState.allModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize all models — summary.hydroState.allModels","text":"summary every model object build., reference model calibration. reference model slightly simpler model one less parameter. calibration fit, model performance must exceed performance reference model else model rejected. function used output summary.table adjust reference models. Afterwards, models can re-build including summary.table build.function.","code":""},{"path":"https://peterson-tim-j.github.io/HydroState/reference/summary.hydroState.allModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize all models — summary.hydroState.allModels","text":"","code":"# Show summary table of all fitted model details and reference models  if (FALSE) { # \\dontrun{ all.models.ref.table = summary(all.models) } # }"},{"path":"https://peterson-tim-j.github.io/HydroState/news/index.html","id":"hydrostate-0200","dir":"Changelog","previous_headings":"","what":"hydroState 0.2.0.0","title":"hydroState 0.2.0.0","text":"Initial CRAN submission making! 🎉 Main Functions: build() build.() fit.hydroState() setInitialYear() plot.hydroState() get.AIC() Vignette: Getting Started Adjust default state model Seasonal monthly models","code":""}]
